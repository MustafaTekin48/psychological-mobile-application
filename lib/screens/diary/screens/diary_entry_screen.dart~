import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../database/diary_database_helper.dart';
import '../widgets/diary_notification_helper.dart'; // Import NotificationHelper

class DiaryEntryPage extends StatefulWidget {
  final String emotion;

  DiaryEntryPage({required this.emotion});

  @override
  _DiaryEntryPageState createState() => _DiaryEntryPageState();
}

class _DiaryEntryPageState extends State<DiaryEntryPage> {
  final TextEditingController _reasonController = TextEditingController();
  int _selectedRating = 6;
  bool _isSaved = false; // Kaydedilip kaydedilmediƒüini kontrol etmek i√ßin deƒüi≈üken

  Future<void> _saveNote() async {
    String reason = _reasonController.text;
    int rating = _selectedRating;

    if (reason.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('L√ºtfen duygunuzun nedenini a√ßƒ±klayƒ±n.')),
      );
      return;
    }

    Map<String, dynamic> newEntry = {
      'date': DateTime.now().toIso8601String(),
      'emotion': widget.emotion,
      'reason': reason,
      'rating': rating,
    };

    int result = await DiaryDatabase.instance.addEntry(newEntry);

    if (result > 0) {
      setState(() {
        _isSaved = true; // Kaydedildiƒüini i≈üaretle
      });
      // Schedule a notification for a reminder in 24 hours
      DateTime reminderTime = DateTime.now().add(Duration(seconds: 10));
      await DiaryNotificationHelper.scheduleNotification(
        "Hatƒ±rlatma üîî",
        "Bug√ºnk√º duygularƒ±nƒ± g√∂zden ge√ßirmek ister misin?",
        reminderTime,
      );
      Navigator.pop(context, newEntry); // Ana sayfaya geri d√∂n
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ö†Ô∏è G√ºnl√ºk zaten mevcut, eklenmedi!')),
      );
    }
  }

  // Geri tu≈üuna basƒ±ldƒ±ƒüƒ±nda i≈ülem kontrol√º
  Future<bool> _onWillPop() async {
    if (!_isSaved) {
      bool shouldExit = await _showExitConfirmationDialog();
      return shouldExit;
    }
    return true;
  }


  // Kullanƒ±cƒ± kaydetmeden √ßƒ±kmak isterse uyarƒ± g√∂ster
  Future<bool> _showExitConfirmationDialog() async {
    return await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("√áƒ±kmak istediƒüinize emin misiniz?"),
        content: Text("Kaydedilmemi≈ü verileriniz kaybolacaktƒ±r."),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text("Hayƒ±r"),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            child: Text("Evet"),
          ),
        ],
      ),
    ) ??
        false;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop, // Geri tu≈üuna basƒ±ldƒ±ƒüƒ±nda √ßalƒ±≈üacak
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          title: Text('Neden ${widget.emotion} hissediyorsunuz?'),
          backgroundColor: _getEmotionColor(widget.emotion),
        ),
        body: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Container(
                  padding: EdgeInsets.all(16.0),
                  decoration: BoxDecoration(
                    color: _getEmotionColor(widget.emotion)?.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: TextField(
                    controller: _reasonController,
                    maxLength: 500,
                    maxLines: 3,
                    decoration: InputDecoration(
                      counterText: '${_reasonController.text.length}/500',
                      hintText: 'Neden ${widget.emotion} hissediyorsunuz?',
                      border: InputBorder.none,
                    ),
                    keyboardType: TextInputType.text,
                    inputFormatters: [
                      FilteringTextInputFormatter.allow(
                        RegExp(r'^[a-zA-Zƒü√º≈ü√∂√ßƒ±ƒ∞ƒû√ú≈û√ñ√á\s.,!?-]*$'),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 20),
                Text(
                  '${widget.emotion} olma durumunuzu oylayƒ±nƒ±z:',
                  style: TextStyle(fontSize: 18, color: Colors.black54),
                ),
                SizedBox(height: 10),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [2, 4, 6, 8, 10].map((rating) {
                    return GestureDetector(
                      onTap: () {
                        setState(() {
                          _selectedRating = rating;
                        });
                      },
                      child: Container(
                        padding: EdgeInsets.symmetric(vertical: 12, horizontal: 20),
                        decoration: BoxDecoration(
                          color: _selectedRating == rating
                              ? Colors.red.shade300
                              : Colors.grey.shade300,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          rating.toString(),
                          style: TextStyle(
                            fontSize: 18,
                            color: _selectedRating == rating ? Colors.white : Colors.black,
                          ),
                        ),
                      ),
                    );
                  }).toList(),
                ),
                SizedBox(height: 30),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(backgroundColor: Colors.grey),
                      onPressed: () async {
                        bool shouldExit = await _onWillPop();
                        if (shouldExit) Navigator.pop(context);
                      },
                      child: Text('ƒ∞ptal'),
                    ),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(backgroundColor: Colors.red.shade300),
                      onPressed: _saveNote,
                      child: Text('Ekle'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Color _getEmotionColor(String emotion) {
    switch (emotion.toLowerCase()) {
      case 'mutlu':
        return Color(0xFFFFF3B0);
      case 'heyecanlƒ±':
        return Color(0xFFFFD1A4);
      case 'normal':
        return Color(0xFFB2E0A8);
      case '√ºzg√ºn':
        return Color(0xFFAEC6FF);
      case 'kƒ±zgƒ±n':
        return Color(0xFFFFB3B3);
      case 'korkulu':
        return Color(0xFFD1B3FF);
      default:
        return Colors.black;
    }
  }
}
